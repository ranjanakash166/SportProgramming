#include<iostream>
#include<algorithm>
using namespace std;
 
#include<string.h>
#include<math.h>
#define MAX 120000
#define inf 0x7fffffff
#define ins(a) scanf("%s",a)
#define ind(a) scanf("%d",&a)
int arr[MAX];
int tree[MAX];
int lazy[MAX];
int x[MAX];
char str[30002];
/**
 * Build and init tree
 */
int N;
void build_tree(int node, int a, int b) {
	if (a > b) return; // Out of range
 
	if (a == b) { // Leaf node
		tree[node] = arr[a]; // Init value
		return;
	}
 
	build_tree(node * 2, a, (a + b) / 2); // Init left child
	build_tree(node * 2 + 1, 1 + (a + b) / 2, b); // Init right child
 
	tree[node] = min(tree[node * 2], tree[node * 2 + 1]); // Init root value
}
 
/**
 * Increment elements within range [i, j] with value value
 */
void update_tree(int node, int a, int b, int i, int j, int value) {
 
	if (lazy[node] != 0) { // This node needs to be updated
		tree[node] += lazy[node]; // Update it
 
		if (a != b) {
			lazy[node * 2] += lazy[node]; // Mark child as lazy
			lazy[node * 2 + 1] += lazy[node]; // Mark child as lazy
		}
 
		lazy[node] = 0; // Reset it
	}
 
	if (a > b || a > j || b < i) // Current segment is not within range [i, j]
		return;
 
	if (a >= i && b <= j) { // Segment is fully within range
		tree[node] += value;
 
		if (a != b) { // Not leaf node
			lazy[node * 2] += value;
			lazy[node * 2 + 1] += value;
		}
 
		return;
	}
 
	update_tree(node * 2, a, (a + b) / 2, i, j, value); // Updating left child
	update_tree(1 + node * 2, 1 + (a + b) / 2, b, i, j, value); // Updating right child
 
	tree[node] = min(tree[node * 2], tree[node * 2 + 1]); // Updating root with max value
}
 
/**
 * Query tree to get max element value within range [i, j]
 */
int query_tree(int node, int a, int b, int i, int j) {
 
	if (a > b || a > j || b < i) return inf; // Out of range
 
	if (lazy[node] != 0) { // This node needs to be updated
		tree[node] += lazy[node]; // Update it
 
		if (a != b) {
			lazy[node * 2] += lazy[node]; // Mark child as lazy
			lazy[node * 2 + 1] += lazy[node]; // Mark child as lazy
		}
 
		lazy[node] = 0; // Reset it
	}
 
	if (a >= i && b <= j) // Current segment is totally within range [i, j]
		return tree[node];
 
	int q1 = query_tree(node * 2, a, (a + b) / 2, i, j); // Query left child
	int q2 = query_tree(1 + node * 2, 1 + (a + b) / 2, b, i, j); // Query right child
 
	int res = min(q1, q2); // Return final result
 
	return res;
}
 
int main() {
	int k = 0;
	while (cin >> N)
	{
		ins(str);
		for (int i = 0; i < N; i++)
		{
			if (str[i] == '(')
			{
				arr[i] = 1;
				x[i] = 1;
			}
			else
			{
				arr[i] = -1;
				x[i] = -1;
			}
		}
		for (int i = 1; i < N; i++)
			arr[i] += arr[i - 1];
 
		build_tree(1, 0, N - 1);
 
		memset(lazy, 0, sizeof lazy);
		int q, d;
		//++k;
		++k;
		printf("Test %d:\n", k);
		ind(q);
		while (q--)
		{
			ind(d);
			if (!d)
			{
				int x = query_tree(1, 0, N - 1, N - 1, N - 1);
				int y = query_tree(1, 0, N - 1, 0, N - 1);
				if (!x && !y)
					printf("YES\n");
				else
					printf("NO\n");
			}
			else
			{
				int val;
				val = x[d - 1];
				if (val == -1)
				{
					x[d - 1] = 1;
					update_tree(1, 0, N - 1, d - 1, N - 1, 2);
				}
				else
				{
					x[d - 1] = -1;
					update_tree(1, 0, N - 1, d - 1, N - 1, -2);
				}
			}
		}
	}
	return 0;
}