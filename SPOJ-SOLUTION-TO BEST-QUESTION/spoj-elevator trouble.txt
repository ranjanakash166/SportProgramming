/*
* @problem: ELEVTRBL
*/
#include <iostream>
#include <algorithm>
#include <utility>
#include <cstring>
#include <string.h>
#include <set>
#include <map>
#include <math.h>
#include <stdio.h>
#include <vector>
#include <queue>
#include <functional>
#include <bitset>
#include <iomanip>
#define ll long long
#define pi acos(-1.0)
#define pb push_back
#define MS0(ar) memset(ar,0,sizeof ar)
#define MS1(ar) memset(ar,-1,sizeof ar)
#define ff first
#define ss second
#define pii pair<int,int>
#define pll pair<ll,ll>
#define ind(a) scanf("%d",&a)
#define inf(a) scanf("%lf",&a)
#define inl(a) scanf("%lld",&a)
#define ins(a) scanf("%s",a)
#define pd(a) printf("%d\n",a)
#define pl(a) printf("%lld\n",a);
#define bitcnt(x) __builtin_popcountll(x)
using namespace std;
int maxf, minf = 1, up, d;
const int MAX = 1e6 + 20;
int vis[MAX], lev[MAX];
void solve(int src)
{
	queue<int>q;
	q.push(src);
	lev[src] = 0;
	vis[src] = 1;
	while (!q.empty())
	{
		int cur = q.front();
		//cout << cur << " ";
		q.pop();
		int nup = cur + up;
		int nd = cur - d;
		// if (nd == des || nup == des)
		// 	return lev[cur] + 1;
		if (nup <= maxf && !vis[nup])
		{
			q.push(nup);
			lev[nup] = lev[cur] + 1;
			vis[nup] = 1;
		}
		if (nd >= minf && !vis[nd])
		{
			//cout<<nd<<" p p ";
			q.push(nd);
			lev[nd] = lev[cur] + 1;
			vis[nd] = 1;
		}
	}
}
int main()
{
 
	ios_base::sync_with_stdio(0);
	cin.tie(0);
#ifndef ONLINE_JUDGE
	freopen("../input.txt", "r", stdin);
	//freopen("../output.txt","w",stdout);
#endif
	int src, des;
	cin >> maxf >> src >> des >> up >> d;
	lev[des] = -1;
	solve(src);
	if (lev[des] != -1)
		cout << lev[des] << endl;
	else
		cout << "use the stairs" << endl;
	return 0;
} 