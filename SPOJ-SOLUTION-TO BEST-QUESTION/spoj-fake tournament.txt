/*
* @problem: TOUR
* PLEDGE : I WILL BE BLUE IN CODEFORCES BEFORE MY VACATION ENDS.
*/
#include <iostream>
#include <algorithm>
#include <utility>
#include <cstring>
#include <string.h>
#include <queue>
#include <set>
#include <map>
#include <math.h>
#include <stdio.h>
#include <vector>
#include <functional>
#include <bitset>
#include <iomanip>
#define ll long long
#define pi acos(-1.0)
#define pb push_back
#define MS0(ar) memset(ar,0,sizeof ar)
#define MS1(ar) memset(ar,-1,sizeof ar)
#define ff first
#define ss second
#define pii pair<int,int>
#define pll pair<ll,ll>
#define ind(a) scanf("%d",&a)
#define inf(a) scanf("%lf",&a)
#define inl(a) scanf("%lld",&a)
#define ins(a) scanf("%s",a)
#define pd(a) printf("%d\n",a)
#define pl(a) printf("%lld\n",a);
#define bitcnt(x) __builtin_popcountll(x)
#define mod 1000000007
const int MAX = 10000 + 10;
using namespace std;
int vis[MAX];
int comp[MAX],indeg[MAX],fn[MAX];
vector<int>v[MAX], v1[MAX], Q;
int t1,scc;
void dfs1(int x)
{
	vis[x] = 1;
	 t1++;
	for (int i = 0; i < v[x].size(); i++)
	{
		int cur = v[x][i];
		if (!vis[cur])
			dfs1(cur);
	}
	fn[x] = t1++;
	Q.pb(x);
}
void dfs2(int x)
{
	vis[x] = 0;
	comp[x] = scc;
	for (int i = 0; i < v1[x].size(); i++)
	{
		int cur = v1[x][i];
		if (vis[cur])
		{
			dfs2(cur);
		}
	}
}
void reset()
{
	scc = 1;
	t1= 0;
	Q.clear();
	for (int i = 0; i <= 1000; i++)
	{
		vis[i] = 0;
		indeg[i] = 0;
		v[i].clear();
		v1[i].clear();
		comp[i] = 0;
	}
}
int main()
{
 
	ios_base::sync_with_stdio(0);
	cin.tie(0);
#ifndef ONLINE_JUDGE
	freopen("../input.txt", "r", stdin);
	//freopen("../output.txt","w",stdout);
#endif
	int t,n,m,x;
	cin >> t;
	while (t--)
	{
		reset();
		cin >> n;
		for (int i = 1; i <= n; i++)
		{
			cin >> m;
			for (int j = 1; j <= m; j++)
			{
				cin >> x;
				v[x].pb(i);
				v1[i].pb(x);
			}
		}
		for (int i = 1; i <= n; i++)
		{
			if (!vis[i])
				dfs1(i);
		}
		for (int i = (int)(Q.size() - 1); i >= 0; i--)
		{
			if (vis[Q[i]])
			{
				dfs2(Q[i]);
				scc++;
			}
		}
		for (int i = 1; i <= n; i++)
		{
			for (int j = 0; j < v[i].size(); j++)
			{
				if (comp[i] != comp[v[i][j]])
				{
					indeg[comp[v[i][j]]]++;
				}
			}
		}
		int count = 0;
		for (int i = 1; i < scc; i++)
		{
			if (indeg[i] == 0)
			{
				count++;
			}
		}
		if (count > 1)
			cout << "0" << endl;
		else
		{
			int ans = 0;
			for (int i = 1; i <= n; i++)
			{
				if (indeg[comp[i]] == 0)
				{
					ans++;
				}
			}
			cout << ans << endl;
		}
	}
 
	return 0;
} 