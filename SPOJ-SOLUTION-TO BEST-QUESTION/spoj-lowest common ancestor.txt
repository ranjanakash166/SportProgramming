// created by: Prashant Kumar Singh :)
// love sucks :P
#include<iostream>
#include<algorithm>
#include<utility>
#include<cstring>
#include<string.h>
#include<set>
#include<map>
#include<math.h>
#include<stdio.h>
#include<stack>
#include<vector>
#include<functional>
#include<bitset>
#include<iomanip>
#define ll long long
#define gr greater<ll>()
#define pi acos(-1.0)
#define pb push_back
#define MS0(ar) memset(ar,0,sizeof ar)
#define MS1(ar) memset(ar,-1,sizeof ar)
#define f first
#define s second
#define pii pair<int,int>
#define pll pair<ll,ll>
#define ind(a) scanf("%d",&a)
#define inf(a) scanf("%lf",&a)
#define inl(a) scanf("%lld",&a)
#define ins(a) scanf("%s",a)
#define pd(a) printf("%d\n",a)
#define pl(a) printf("%lld\n",a);
#define bitcnt(x) __builtin_popcountll(x)
using namespace std;
const int sz = 10010;
int dp[sz][15], lev[sz];
vector<int>vec[sz];
//stack<int>s;
void dfs(int src)
{
	stack<int>s;
	lev[src] = 0;
	s.push(src);
	while (!s.empty())
	{
		int cur = s.top();
		s.pop();
		for (int i = 0; i < vec[cur].size(); i++)
		{
			int tmp = vec[cur][i];
			if (tmp != dp[cur][0])
			{
				lev[tmp] = lev[cur] + 1;
				s.push(tmp);
				dp[tmp][0] = cur;
			}
		}
	}
 
}
int query(int p, int q)
{
	int lg;
	if (lev[p] < lev[q])
		swap(p, q);
	for (lg = 1; 1 << lg <= lev[p]; lg++);
	lg--;
	for (int i = lg; i >= 0; i--)
	{
		if (lev[p] - (1 << i) >= lev[q])
			p = dp[p][i];
	}
	if (p == q)
		return p;
	for (int i = lg; i >= 0; i--)
		if (dp[p][i] != -1 && dp[p][i] != dp[q][i])
			p = dp[p][i], q = dp[q][i];
	return dp[p][0];
}
int main()
{
#ifndef ONLINE_JUDGE
	freopen("../input.txt", "r", stdin);
#endif
	int p, q, qu, a, b, n, t;
	ind(t);
	for (int ok = 1; ok <= t; ok++)
	{
		MS0(lev);
		for (int i = 0; i < sz; i++)
			vec[i].clear();
		ind(n);
		for (int i = 1; i <= n; i++)
		{
			ind(a);
			for (int j = 0; j < a; j++)
			{
				ind(b);
				vec[b].pb(i);
				vec[i].pb(b);
			}
		}
		MS1(dp);
		dfs(1);
		for (int j = 1; 1 << j <= n; j++)
		{
			for (int i = 1; i <= n; i++)
			{
				if (dp[i][j - 1] != -1)
					dp[i][j] = dp[dp[i][j - 1]][j - 1];
			}
		}
		printf("Case %d:\n", ok);
		ind(qu);
		for (int k = 1; k <= qu; k++)
		{
			ind(p);
			ind(q);
			//if(ty==1)
			printf("%d\n", query(p, q));
		}
	}
	return 0;
} 