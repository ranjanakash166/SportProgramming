// created  : Prashant Kumar Singh :) 
#include<iostream>
#include<algorithm>
#include<stdio.h>
#include<math.h>
#include<cstring>
#include<utility>
#include<cstring>
#include<set>
#include<map>
#include<vector>
#include<functional>
#define ll long long
#define gr greater<ll>()
#define pi acos(-1.0)
#define mp make_pair
#define sz(a) int((a).size())
#define pb push_back
#define f(i,l,r) for(int i=l;i<=r;i++)
#define in_T int t;for(scanf("%d",&t);t--;)
#define in_I(a) scanf("%d",&a)
#define in_F(a) scanf("%lf",&a)
#define in_L(a) scanf("%I64d",&a)
#define in_S(a) scanf("%s",a)
#define newline printf("\n")
#define MAX1(a,b) a>b?a:b
#define MIN(a,b) a<b?a:b
#define SWAP(a,b) {int tmp=a;a=b;b=tmp;}
#define P_I(a) printf("%d\n",a)
#define P_L(a) printf("%I64d\n",a);
const ll  MAX = 200005;
using namespace std;
inline void fastscan(int &x)
{
    bool neg = false;
    register int c;
    x = 0;
    c = getchar();
    if (c == '-')
    {
        neg = true;
        c = getchar();
    }
    for (; (c > 47 && c < 58); c = getchar())
        x = (x << 1) + (x << 3) + c - 48;
    if (neg)
        x *= -1;
}
 
struct query
{
    int l, r, n;
} q[2*MAX];
int    x[2*MAX], ans[2*MAX], c = 0,temp;
int  cnt[10*MAX],n,m,block;
bool comp(query x, query y)
{
    if (x.l / block != y.l / block)
        return x.l / block < y.l / block;
    return x.r < y.r;
}
void add(int  pos)
{ 
	cnt[x[pos]]++;
	if(cnt[x[pos]]==1)
		c++;
}
void remove(int  pos)
{
     cnt[x[pos]]--;
     if(cnt[x[pos]]==0)
     	c--;
}
 
 
int main()
{
    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
#endif
    in_I(n);
    block = sqrt(n);
    for (int i = 1; i <= n; i++)
    {
       in_I(x[i]);
    }
      in_I(m);
    for (int i = 0; i < m; i++)
    {
        in_I(q[i].l); 
        in_I(q[i].r);
        q[i].n = i;
    }
    sort(q, q + m, comp);
 
    int curL = 1, curR = 1, L, R;
    for (int i = 0; i < m; i++)
    {
        L = q[i].l;
        R = q[i].r;
 
        while (curL < L)
        {
            remove(curL);
            curL++;
        }
        while (curL > L)
        {
            add(curL - 1);
            curL--;
        }
        while (curR <= R)
        {
            add(curR);
            curR++;
        }
        while (curR > R + 1)
        {
            remove(curR - 1);
            curR--;
        }
 
        ans[q[i].n] = c;
    }
 
    for (int i = 0; i < m; i++)
    {
        P_I(ans[i]);
    }
 
    return 0;
} 